datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String   @id @default(cuid())
    username      String   @unique
    password      String
    name          String?
    email         String?  @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Application models

model Task {
    id               String             @id @default(cuid())
    name             String
    updatedAt        DateTime           @updatedAt
}

/// BlogPost stores markdown blog entries authored via the admin UI.
/// Fields capture basic metadata and full content while tracking
/// creation and update timestamps. This is intentionally minimal and
/// can be extended with slugs or publication state if needed.
model BlogPost {
    id        String   @id @default(cuid())
    title     String
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
